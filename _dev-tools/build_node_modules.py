# pylint: disable=C0114: missing-class-docstring
# pylint: disable=C0116: missing-function-docstring
from pathlib import Path

import shutil
import requests


from lib import (
    colors,
    my_run,
    Spinner,
    touch_file,
    delete_file,
    ensure_npm_package,
    pause_watchman,
    start_watchman,
)


def set_yarn_to_use_node_modules(yarnrc_file):
    with open(yarnrc_file, "r+", encoding="utf-8") as f:
        content = f.read()
        if "nodeLinker: node-modules" not in content:
            # Add the line to the top of the file
            f.seek(0)
            f.write("nodeLinker: node-modules\n\n" + content)
            print("- Added 'nodeLinker: node-modules' to yarnrc.yml")


def check_and_update_yarn_version():
    print(colors.BLUE + "\n* CHECKING latest Yarn version." + colors.ENDC)
    response = requests.get(
        "https://api.github.com/repos/yarnpkg/berry/releases/latest"
    )
    latest = response.json()["tag_name"].split("/")[-1].lstrip("v")

    print(colors.BLUE + "* CHECKING installed Yarn version." + colors.ENDC)
    result = my_run(["yarn", "--version"], capture_output=True, text=True)
    installed = result.stdout.strip()

    if installed != latest:
        print(colors.BLUE + f"* UPDATING Yarn to version {latest}." + colors.ENDC)
        my_run(["yarn", "set", "version", latest])
    else:
        print(f"- Yarn is up to date: {installed}")


def verify_yarn_settings(root_folder):
    print(colors.BLUE + "\n* VERIFYING yarn settings." + colors.ENDC)
    with Spinner(show_check=True):
        yarnrc_file = root_folder / ".yarnrc.yml"
        if yarnrc_file.exists():
            set_yarn_to_use_node_modules(yarnrc_file)
        else:
            print(
                colors.BLUE
                + "- yarnrc.yml does not exist. Setting yarn version to latest.\n"
                + colors.ENDC
            )
            my_run(["yarn", "set", "version", "berry"])
            set_yarn_to_use_node_modules(yarnrc_file)


def delete_files(root_folder):
    print(
        colors.BLUE
        + "\n* DELETING yarn.lock to ensure all dependencies match package.json."
        + colors.ENDC
    )
    delete_file(root_folder, "yarn.lock")


def delete_node_modules_folder(root_folder):
    print(colors.BLUE + "\n* DELETING node_modules folder." + colors.ENDC)
    with Spinner(show_check=True):
        shutil.rmtree(root_folder / "node_modules", ignore_errors=True)


def run_yarn_install():
    print(
        colors.BLUE + "\n* RUNNING yarn install to add new dependencies." + colors.ENDC
    )
    my_run(["yarn", "install", "--silent"])


def run_expo_fix():
    print(
        colors.BLUE + "\n* RUNNING `expo --fix` to fix dependency issues." + colors.ENDC
    )
    my_run(["npx", "expo", "install", "--fix"])


def restart_eslint_and_ts_servers(root_folder):
    touch_file(root_folder / "tsconfig.json")
    touch_file(root_folder / "eslint.config.js")


def run_expo_doctor():
    print(
        colors.BLUE
        + "\n* RUNNING `expo doctor` for a final project checkup."
        + colors.ENDC
    )
    my_run(["npx", "--yes", "expo-doctor@latest"])


def rebuild_node_modules():
    root_folder = Path().absolute()

    # pause_watchman(root_folder)
    verify_yarn_settings(root_folder)
    delete_files(root_folder)
    delete_node_modules_folder(root_folder)
    run_yarn_install()
    # run_expo_fix()
    restart_eslint_and_ts_servers(root_folder)
    # run_expo_doctor()
    start_watchman(root_folder)


if __name__ == "__main__":
    div = "=" * 35
    print(colors.ORANGE + f"\nRebuild Node Modules - START ðŸŸ¢\n{div}" + colors.ENDC)

    # ensure_npm_package("eas-cli")
    rebuild_node_modules()
    check_and_update_yarn_version()

    print(colors.ORANGE + f"\nRebuild Node Modules - COMPLETE âœ”\n{div}" + colors.ENDC)
